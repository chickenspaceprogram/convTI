convTI development planning/ideas

This is as much for me to plan this project out as anything, feel free to ignore it. 
Plans will change, nothing in here is a "promised feature" or anything.

Past versions: 

v0.1.0
    - First version of Data & File headers mostly complete (needs future bugtesting and possible refactor)

v0.2.0-0
    - Format should no longer be an optional argument, force user to specify it
v0.2.0-0.1 (current)
    - Add support for arbitrary --flags, necessary in future for things like --justtext and --decompile
    - make sure --flags are properly unit tested!

Future versions:
v0.2.0-1
    - Add support for creating file headers of all the following types:
        - rnum - Real Number
        - yvar - Y-Variable
        - prgm - Program
        - elprgm - Edit-locked program
        - cnum - Complex Number
        - gdb - GDB (not implemented)
        - pic - Pic (not implemented)
        - tbl - Table setting (not implemented)
    - Support for gdb, pic, and tbl is not currently planned but may come if I decide to do it.

v0.2.1
    - Write unit tests, ensure headers are bug-free (or at least bug-resistant)

v0.3.x - conversion of prgm, yvar, str to .8x* files
    - this will force me to actually learn regex properly won't it ;-;
        - ` +(?=.*(?:"|$|->))(?!".*)` shooould match only spaces inside of quotes. might have to use \ to escape some chars in the regex but whatever
            - that leading space is important!
            - can't guarantee this is the fastest way to do this but it's the lazy way!
    - include some sort of syntax for list, string, & matrix tokens beyond L1-L6, Str1-Str0, & [A]-[J]
        - maybe L0xnn, Str0xnn, [0xnn] where nn is a byte in hex. No idea how hard this would be to implement tbh.
            - `0x` here basically functions as an escape character. It's used because it emphasizes to the user that they're entering a hex value.
                - just type `0\x` or something to that effect to give you 0x
    - include the same character conversions as SourceCoder, makes life easy

v0.4.x - conversion of rlist, clist, matrix, rnum, cnum to .8x* files
    - update strings to have the --justtext flag, allowing them to be interpreted as plaintext instead of tokens
        - while you could just use token breaks, this is easier

v0.5.x - decompilation of .8x* -> something human-readable
    - probably somewhat easy? just a hashmap hashing token -> text
    - syntax should be something like `convti --decompile thing.8xp` or `convti -d thing.8xp`

v0.6.x - make a VSCode extension to have something resembling a TI-BASIC idea
    - no idea how to do this or if it's even feasible, but it would be cool!