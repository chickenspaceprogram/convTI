convTI development planning/ideas

This is as much for me to plan this project out as anything, feel free to ignore it. 
Plans will change, nothing in here is a "promised feature" or anything.

v0.2.x - conversion of lists, strings, and matrices to .8x* files
    - incl. ability to store to all 256 2-byte list, string, and matrix tokens
        - hex codes for future reference, just treating these as words that will actually get stored little endian
        - Matrices: 0x00aa - 0xffaa
        - Lists: 0x005d - 0xff5d
        - Strings: 0x005c - 0xff5c
        - while tokens beyond L1-L6, [A]-[J], & Str1-Str0 don't display correctly, having access to 256 matrices/strings is valuable

v0.3.x - conversion of prgms, Y-vars, etc to .8x* files
    - this will force me to actually learn regex properly won't it ;-;
        - ` +(?=.*(?:"|$|->))(?!".*)` shooould match only spaces inside of quotes. might have to use \ to escape some chars but whatever
            - that leading space is important!
            - can't guarantee this is the fastest way to do this but it's the lazy way!
    - update strings to have the --justtext flag, allowing them to be interpreted as plaintext instead of tokens
        - while you could just use token breaks, this is easier
    - include some sort of syntax for list, string, & matrix tokens beyond L1-L6, Str1-Str0, & [A]-[J]
        - maybe L0xnn, Str0xnn, [0xnn] where nn is a byte in hex. No idea how hard this would be to implement tbh.
            - alternately 0xLnn, 0xStrnn, 0x[nn]
            - `0x` here basically functions as an escape character. It's used because it emphasizes to the user that they're entering a hex value.
                - just type `0\x` or something to that effect to give you 0x
    - include the same character conversions as SourceCoder, makes life easy

v0.4.x - decompilation of .8x* -> something human-readable
    - probably somewhat easy? just a hashmap hashing token -> text
    - syntax should be something like `convti --decompile thing.8xp` or `convti -d thing.8xp`

v1.0.x - make a VSCode extension to have something resembling a TI-BASIC idea
    - no idea how to do this or if it's even feasible, but it would be cool!